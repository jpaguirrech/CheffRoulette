# Chef Roulette API Documentation

## Overview
Chef Roulette automatically extracts recipes from social media content (TikTok, Instagram, YouTube, Pinterest, Facebook, Twitter) using AI video/image analysis.

## API Endpoint

### Process Social Media Content
**URL:** `https://flw.panteragpt.com/webhook/social-media-recipe`  
**Method:** `POST`  
**Content-Type:** `application/json`  
**Processing Time:** ~20-30 seconds  

### Request Format
```json
{
  "content_url": "https://www.tiktok.com/@chef/video/123456789",
  "user_id": "550e8400-e29b-41d4-a716-446655440000",
  "recipe_name": "Optional custom name for recipe"
}
```

### Request Parameters
| Parameter | Type | Required | Description |
|-----------|------|----------|-------------|
| `content_url` | string | ✅ | URL from supported platforms |
| `user_id` | string | ✅ | Valid UUID of authenticated user |
| `recipe_name` | string | ❌ | Optional custom name for the recipe |

### Supported Platforms
- **TikTok**: `tiktok.com`
- **Instagram**: `instagram.com` (posts, reels, stories)
- **YouTube**: `youtube.com`, `youtu.be` (videos, shorts)
- **Pinterest**: `pinterest.com`
- **Facebook**: `facebook.com`
- **Twitter/X**: `twitter.com`, `x.com`

## API Response

### Success Response (200 OK)
```json
{
  "success": true,
  "status": "completed",
  "message": "Recipe extracted successfully",
  "data": {
    "content_id": "4f73339b-3db5-4ad4-8523-7ccfc320488a",
    "recipe_id": "020ad544-1d8e-4d87-bdb7-c78d7c985c5e",
    "recipe_title": "Easy and Crunchy Cucumber Kimchi",
    "description": "A simple and easy recipe for making delicious and crunchy cucumber kimchi that stays fresh for weeks. A perfect Korean side dish.",
    "platform": "tiktok",
    "content_type": "video",
    "original_url": "https://www.tiktok.com/@chef/video/123456789",
    "prep_time": 20,
    "cook_time": 40,
    "total_time": 60,
    "servings": 8,
    "difficulty_level": "easy",
    "cuisine_type": "Korean",
    "meal_type": "snack",
    "ai_confidence_score": 0.85,
    "processed_at": "2025-07-24T03:06:36.183Z"
  },
  "error": null
}
```

### Error Response (400/500)
```json
{
  "success": false,
  "status": "error",
  "message": "Error processing recipe",
  "data": null,
  "error": "Failed to parse recipe: Missing required fields"
}
```

### Response Fields Explanation
| Field | Type | Description |
|-------|------|-------------|
| `content_id` | UUID | ID of the social media content record |
| `recipe_id` | UUID | ID of the extracted recipe record |
| `recipe_title` | string | AI-extracted recipe title |
| `description` | string | Brief description of the dish |
| `platform` | string | Source platform (tiktok, instagram, etc.) |
| `content_type` | string | Type of content (video, image, post, reel) |
| `prep_time` | integer | Preparation time in minutes |
| `cook_time` | integer | Cooking time in minutes |
| `total_time` | integer | Total time (prep + cook) |
| `servings` | integer | Number of servings |
| `difficulty_level` | string | easy, medium, or hard |
| `cuisine_type` | string | Type of cuisine (Italian, Mexican, etc.) |
| `meal_type` | string | breakfast, lunch, dinner, snack, or dessert |
| `ai_confidence_score` | decimal | AI confidence (0.00 to 1.00) |

## Database Structure (Supabase)

### Main Tables

#### 1. `social_media_content`
Stores the original social media posts and metadata.

```sql
SELECT * FROM social_media_content 
WHERE user_id = 'user-uuid' 
ORDER BY created_at DESC;
```

**Key Columns:**
- `id` (UUID) - Primary key
- `user_id` (UUID) - References auth.users(id)
- `original_url` (VARCHAR) - Source URL
- `platform` (VARCHAR) - Platform name
- `content_type` (VARCHAR) - Content type
- `title` (TEXT) - Content title
- `status` (VARCHAR) - pending, processing, completed, error
- `created_at` (TIMESTAMP) - When added
- `processed_at` (TIMESTAMP) - When completed

#### 2. `extracted_recipes`
Stores the AI-extracted recipe data.

```sql
SELECT * FROM extracted_recipes er
JOIN social_media_content smc ON er.social_media_content_id = smc.id
WHERE smc.user_id = 'user-uuid'
AND er.status = 'published'
ORDER BY smc.created_at DESC;
```

**Key Columns:**
- `id` (UUID) - Primary key
- `social_media_content_id` (UUID) - Foreign key
- `recipe_title` (VARCHAR) - Recipe name
- `description` (TEXT) - Recipe description
- `ingredients` (JSONB) - Array of ingredients with amounts
- `instructions` (JSONB) - Array of cooking steps
- `prep_time` (INTEGER) - Minutes
- `cook_time` (INTEGER) - Minutes
- `servings` (INTEGER) - Number of servings
- `difficulty_level` (VARCHAR) - easy, medium, hard
- `cuisine_type` (VARCHAR) - Cuisine classification
- `meal_type` (VARCHAR) - Meal classification
- `dietary_tags` (JSONB) - Array of dietary tags
- `chef_attribution` (VARCHAR) - Chef name if mentioned
- `ai_confidence_score` (DECIMAL) - AI confidence level

## Frontend Implementation Guide

### 1. Add Recipe Form
```javascript
// Example React Native implementation
const addRecipe = async (contentUrl, userId, recipeName) => {
  try {
    setLoading(true);
    
    const response = await fetch('https://flw.panteragpt.com/webhook/social-media-recipe', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        content_url: contentUrl,
        user_id: userId,
        recipe_name: recipeName
      })
    });
    
    const result = await response.json();
    
    if (result.success) {
      // Show immediate feedback with basic info
      Alert.alert('Success!', `Recipe "${result.data.recipe_title}" has been added!`);
      
      // Navigate to recipe detail or refresh list
      navigation.navigate('RecipeDetail', { 
        recipeId: result.data.recipe_id,
        contentId: result.data.content_id 
      });
    } else {
      Alert.alert('Error', result.error);
    }
  } catch (error) {
    Alert.alert('Error', 'Failed to process recipe');
  } finally {
    setLoading(false);
  }
};
```

### 2. Get User's Recipes
```javascript
// Fetch all user recipes from Supabase
const getUserRecipes = async (userId) => {
  const { data, error } = await supabase
    .from('social_media_content')
    .select(`
      id,
      original_url,
      title,
      platform,
      content_type,
      created_at,
      extracted_recipes (
        id,
        recipe_title,
        description,
        prep_time,
        cook_time,
        servings,
        difficulty_level,
        cuisine_type,
        meal_type,
        dietary_tags
      )
    `)
    .eq('user_id', userId)
    .eq('status', 'completed')
    .not('extracted_recipes', 'is', null)
    .order('created_at', { ascending: false });
    
  return data;
};
```

### 3. Get Full Recipe Details
```javascript
// Get complete recipe with ingredients and instructions
const getRecipeDetails = async (recipeId) => {
  const { data, error } = await supabase
    .from('extracted_recipes')
    .select(`
      *,
      social_media_content (
        original_url,
        platform,
        created_at
      )
    `)
    .eq('id', recipeId)
    .single();
    
  // Parse JSON fields
  const recipe = {
    ...data,
    ingredients: JSON.parse(data.ingredients),
    instructions: JSON.parse(data.instructions),
    dietary_tags: JSON.parse(data.dietary_tags)
  };
  
  return recipe;
};
```

### 4. Recipe Roulette (Random Recipe)
```javascript
// Get random recipe with optional filters
const getRandomRecipe = async (userId, filters = {}) => {
  let query = supabase
    .from('extracted_recipes')
    .select(`
      *,
      social_media_content!inner (
        user_id,
        original_url,
        platform
      )
    `)
    .eq('social_media_content.user_id', userId)
    .eq('status', 'published');
    
  // Apply filters
  if (filters.maxPrepTime) {
    query = query.lte('prep_time', filters.maxPrepTime);
  }
  if (filters.difficulty) {
    query = query.eq('difficulty_level', filters.difficulty);
  }
  if (filters.mealType) {
    query = query.eq('meal_type', filters.mealType);
  }
  
  const { data } = await query;
  
  // Return random recipe
  if (data && data.length > 0) {
    const randomIndex = Math.floor(Math.random() * data.length);
    return data[randomIndex];
  }
  
  return null;
};
```

### 5. Search Recipes
```javascript
// Search in recipe titles and descriptions
const searchRecipes = async (userId, searchText) => {
  const { data, error } = await supabase
    .from('extracted_recipes')
    .select(`
      id,
      recipe_title,
      description,
      cuisine_type,
      difficulty_level,
      prep_time,
      social_media_content!inner (
        user_id,
        platform
      )
    `)
    .eq('social_media_content.user_id', userId)
    .or(`recipe_title.ilike.%${searchText}%,description.ilike.%${searchText}%`)
    .eq('status', 'published');
    
  return data;
};
```

## Error Handling

### Common Error Scenarios
1. **Invalid URL**: Unsupported platform
2. **Processing Timeout**: Video too long or complex
3. **AI Extraction Failed**: Poor video quality or no recipe content
4. **Database Error**: User not found or permission issues

### Recommended Error Messages
```javascript
const getErrorMessage = (error) => {
  if (error.includes('Unsupported platform')) {
    return 'This platform is not supported. Try TikTok, Instagram, YouTube, Pinterest, Facebook, or Twitter.';
  }
  if (error.includes('timeout')) {
    return 'Processing is taking longer than expected. Please try again.';
  }
  if (error.includes('parse recipe')) {
    return 'Could not extract recipe from this content. Make sure it contains a cooking video or recipe.';
  }
  return 'Something went wrong. Please try again.';
};
```

## Authentication & Security

### User Authentication
- All requests require a valid `user_id` (UUID)
- User must exist in Supabase `auth.users` table
- Row Level Security (RLS) is enabled on all tables

### Supabase RLS Policies
```sql
-- Users can only see their own content
CREATE POLICY "users_own_content" ON social_media_content
  FOR ALL USING (auth.uid() = user_id);

CREATE POLICY "users_own_recipes" ON extracted_recipes
  FOR SELECT USING (
    social_media_content_id IN (
      SELECT id FROM social_media_content WHERE user_id = auth.uid()
    )
  );
```

## Rate Limits & Performance

- **Processing Time**: 20-30 seconds per video
- **Concurrent Requests**: No specific limit
- **Content Size**: Works best with videos under 5 minutes
- **Response Size**: Typical response ~2-5KB

## Data Format Examples

### Ingredients JSON Structure
```json
[
  {
    "name": "Large Cucumbers",
    "amount": "4",
    "unit": "pcs"
  },
  {
    "name": "Salt",
    "amount": "3",
    "unit": "tbsp"
  }
]
```

### Instructions JSON Structure
```json
[
  {
    "step": 1,
    "description": "Prepare the vegetables: Cut the cucumbers, julienne the carrot, slice the onion."
  },
  {
    "step": 2,
    "description": "In a large pot, bring 8 cups of water with 3 tbsp of salt to a boil."
  }
]
```

### Dietary Tags JSON Structure
```json
[
  "kimchi",
  "cucumber", 
  "korean",
  "vegetarian",
  "spicy",
  "easy"
]
```

## Testing

### Test with Sample URLs
```bash
# TikTok
curl -X POST "https://flw.panteragpt.com/webhook/social-media-recipe" \
  -H "Content-Type: application/json" \
  -d '{
    "content_url": "https://www.tiktok.com/@chef/video/123",
    "user_id": "550e8400-e29b-41d4-a716-446655440000",
    "recipe_name": "Test Recipe"
  }'
```

### Expected Response Time
- **Development**: 20-30 seconds
- **Production**: Similar timing expected
- **Timeout**: Set client timeout to 45 seconds minimum